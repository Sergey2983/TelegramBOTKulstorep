from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile
from aiogram.dispatcher import FSMContext
from keyboards import get_start_inline_keyboard, get_question_button
from loader import dp, bot
import sqlite3


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def get_back_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )


@dp.callback_query_handler(lambda c: c.data == "cart")
async def show_user_cart(callback: CallbackQuery):
    user_id = callback.from_user.id

    conn = sqlite3.connect("../database.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, link, size, final_price, status, created_at, photo_id 
        FROM orders 
        WHERE user_id = ?
    """, (user_id,))
    orders = cursor.fetchall()
    conn.close()

    # –£–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


    if not orders:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_back_keyboard())
    else:
        for order in orders:
            order_id, link, size, price, status, created_at, photo_id = order

            caption = (
                f"üßæ –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üóì –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}"
            )

            if photo_id:
                try:
                    await callback.message.answer_photo(photo=photo_id, caption=caption, reply_markup=get_question_button())
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    await callback.message.answer(caption, reply_markup=get_question_button())
            else:
                await callback.message.answer(caption, reply_markup=get_question_button())



@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–∞–¥–æ –æ—á–∏—Å—Ç–∏—Ç—å)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    photo = InputFile("../images/start_logo.png")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=photo,
        caption=(
            "<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –≤—ã–∫—É–ø—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∏—Ç–∞—è!</b>\n\n"
            "üõí <b>–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Å –≤—ã–∫—É–ø–æ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ –≤—Å–µ—Ö –ö–∏—Ç–∞–π—Å–∫–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:</b>\n"
            "- <a href=\"https://www.dewu.com\">Poizon (DEWU)</a>\n"
            "- <a href=\"https://www.taobao.com\">TaoBao</a>\n"
            "–ò –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö üßæ\n\n"
            "üì¶ –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫—É–ø–æ–º –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π ‚Äî –≤—Å—ë –ø—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ!\n\n"
            "‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç.</b>\n"
            "–ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        ),
        reply_markup=get_start_inline_keyboard(),
        parse_mode="HTML"
    )


# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ main.py
def register_cart_handlers(dp):
    dp.register_callback_query_handler(show_user_cart, lambda c: c.data == "cart")
    dp.register_callback_query_handler(back_to_menu, lambda c: c.data == "back_to_menu")
