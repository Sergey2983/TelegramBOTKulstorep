import sqlite3
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, CallbackQuery
from states import OrderStates
from keyboards import get_order_delivery_keyboard, get_order_category_keyboard, get_order_final_keyboard, \
    get_payment_keyboard
import re

YUAN_RATE = 13.5  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è

def register_order_handlers(dp: Dispatcher):
    @dp.callback_query_handler(lambda c: c.data in ["order"], state="*")
    async def start_order(callback: types.CallbackQuery, state: FSMContext):

        photo = InputFile("../images/infocargo.png")
        await callback.message.answer_photo(
            photo=photo,
            caption=(
                "üì¶ <b>–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>\n\n"
                "‚ö†Ô∏è<i>–¢–æ–≤–∞—Ä—ã —Å –∑–Ω–∞–∫–æ–º ‚âà –ù–ï –í–´–ö–£–ü–ê–Æ–¢–°–Ø</i>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:"
            ),
            parse_mode="HTML",
            reply_markup=get_order_delivery_keyboard()
        )
        await OrderStates.choosing_delivery.set()

    @dp.callback_query_handler(lambda c: c.data.startswith("order_delivery_"), state=OrderStates.choosing_delivery)
    async def choose_delivery(callback: types.CallbackQuery, state: FSMContext):
        delivery_type = callback.data.replace("order_delivery_", "")
        await state.update_data(delivery_type=delivery_type)
        await callback.message.delete()
        await callback.message.answer("üëï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_order_category_keyboard(delivery_type))
        await OrderStates.choosing_category.set()

    @dp.callback_query_handler(lambda c: c.data.startswith("order_category_"), state=OrderStates.choosing_category)
    async def choose_category(callback: types.CallbackQuery, state: FSMContext):
        category = callback.data.replace("order_category_", "")
        await state.update_data(category=category)
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
        photo = InputFile("../images/primer.PNG")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        caption = "üì∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ:</b>"
        await callback.message.answer_photo(photo=photo, caption=caption, parse_mode="HTML")
        await OrderStates.waiting_for_photo.set()


    @dp.message_handler(content_types=types.ContentType.PHOTO, state=OrderStates.waiting_for_photo)
    async def handle_photo(message: types.Message, state: FSMContext):
        photo_id = message.photo[-1].file_id
        await state.update_data(photo=photo_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø—Ä–∏–º–µ—Ä–æ–º + HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
        example_photo = InputFile("../images/link.png")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        caption = ("‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç. –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                   "üîó <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ: https://dw4.co/t/A/1rxTiksWr</b>")

        await message.answer_photo(photo=example_photo, caption=caption, parse_mode="HTML")

        await OrderStates.waiting_for_link.set()





    @dp.message_handler(state=OrderStates.waiting_for_photo)
    async def handle_no_photo(message: types.Message, state: FSMContext):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")

    @dp.message_handler(state=OrderStates.waiting_for_link)
    async def handle_link(message: types.Message, state: FSMContext):
        if not re.match(r"https?://[^\s]+", message.text):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
            return
        await state.update_data(link=message.text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é
        example_photo = InputFile("../images/size.PNG")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        caption = "üìè <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.</b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>39.5</i>"
        await message.answer_photo(photo=example_photo, caption=caption, parse_mode="HTML")

        await OrderStates.waiting_for_size.set()





    @dp.message_handler(state=OrderStates.waiting_for_size)
    async def handle_size(message: types.Message, state: FSMContext):
        await state.update_data(size=message.text)

        example_photo = InputFile("../images/infocargo.png")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        caption = ("‚ö†Ô∏è<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –í –Æ–ê–ù–Ø–•.</b>\n\n"
                "‚ö†Ô∏è<b>–¢–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç.</b> –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Ç–æ–ª—å–∫–æ <u>–≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏</u> —Ç–æ–≤–∞—Ä–æ–≤.")

        await message.answer_photo(photo=example_photo, caption=caption, parse_mode="HTML")
        await OrderStates.waiting_for_price.set()

    @dp.message_handler(state=OrderStates.waiting_for_price)
    async def handle_price(message: types.Message, state: FSMContext):
        try:
            price_yuan = float(message.text.replace(",", "."))
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö.")
            return

        user_data = await state.get_data()
        delivery_type = user_data.get("delivery_type")
        category = user_data.get("category")
        photo_id = user_data.get("photo")

        # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        delivery_prices = {
            "standard": {"clothes": 550, "shoes": 1100},
            "express": {"tshirts": 2000, "clothes": 2800, "shoes": 4200, "jackets": 3000}
        }

        delivery_price = delivery_prices.get(delivery_type, {}).get(category, 0)
        final_price = (price_yuan + 30) * YUAN_RATE + delivery_price + 1000 + (
            150 if delivery_type == "standard" else 0)

        await state.update_data(price_yuan=price_yuan, final_price=final_price)

        # –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        caption = (
            "<b>üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞:</b> {user_data.get('link')}\n"
            f"<b>üìê –†–∞–∑–º–µ—Ä:</b> {user_data.get('size')}\n"
            f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {category.capitalize()}\n"
            f"<b>üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {'–ê–≤—Ç–æ' if delivery_type == 'standard' else '–ê–≤–∏–∞'}\n"
            f"<b>üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {price_yuan}¬•\n"
            f"<b>üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <u>{round(final_price)}‚ÇΩ</u>\n\n"
            "<b>üî¥–ü—Ä–∏ –æ—à–∏–±–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—è–≤–ª—è–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ!üî¥</b>\n\n"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç–∞
        await message.answer_photo(
            photo=photo_id,
            caption=caption,
            parse_mode="HTML",
            reply_markup=get_order_final_keyboard()
        )

        await OrderStates.confirming_order.set()

    @dp.callback_query_handler(lambda c: c.data == "confirm_order", state=OrderStates.confirming_order)
    async def confirm_order_callback(callback: CallbackQuery, state: FSMContext):
        user_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = callback.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("../database.db")
        cursor = conn.cursor()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        cursor.execute("SELECT COUNT(*) FROM orders")
        order_number = cursor.fetchone()[0] + 1  # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ + 1

        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ –≤ —Ç–∞–±–ª–∏—Ü—É orders
        cursor.execute("""
            INSERT INTO orders (
                link, size, category_order, type_cargo, price_yuan, final_price, photo_id, order_number, user_id, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user_data.get('link'),
            user_data.get('size'),
            user_data.get('category'),
            user_data.get('delivery_type'),
            user_data.get('price_yuan'),
            user_data.get('final_price'),
            user_data.get('photo'),
            order_number,
            user_id,
            created_at
        ))

        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º
        caption = (
            "<b>üì¶ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_number}\n"
            f"<b>üîó –°—Å—ã–ª–∫–∞:</b> {user_data.get('link')}\n"
            f"<b>üìê –†–∞–∑–º–µ—Ä:</b> {user_data.get('size')}\n"
            f"<b>üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {user_data.get('category').capitalize()}\n"
            f"<b>üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {'–ê–≤—Ç–æ' if user_data.get('delivery_type') == 'standard' else '–ê–≤–∏–∞'}\n"
            f"<b>üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {user_data.get('price_yuan')}¬•\n"
            f"<b>üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> <u>{round(user_data.get('final_price'))}‚ÇΩ</u>\n\n"
            "üî¥–ü—Ä–∏ –æ—à–∏–±–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—É–º–º—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—è–≤–ª—è–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ!üî¥\n\n"
            "üöö –í–Ω–∏–º–∞–Ω–∏–µ! –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö –ø–æ –†–§ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ü–µ–Ω—É ‚Äî –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–¥—ë—Ç—Å—è –∏–∑ –ú–æ—Å–∫–≤—ã.\n\n"
            "üõç <b>–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑.</b>"

        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        await callback.message.answer_photo(
            photo=user_data.get('photo'),
            caption=caption,
            parse_mode="HTML",
            reply_markup=get_payment_keyboard()  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        )

        await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å callback

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await OrderStates.order_paid.set()