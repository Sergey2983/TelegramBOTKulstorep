import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from keyboards import (
    get_start_keyboard, get_main_keyboard, get_standard_categories, get_express_categories,
    get_wholesale_categories, get_back_keyboard, get_order_confirmation_keyboard
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
TOKEN = "6787101762:AAHSFF2wBo1I2N9tdd_U-7OozAjAlt5iqnk"

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è
YUAN_RATE = 12.5

# –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
delivery_costs = {
    "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞": {"üëü –û–±—É–≤—å": 1100, "üëï –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã": 550},
    "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞": {"üëï –§—É—Ç–±–æ–ª–∫–∏": 2000, "üß• –ü—É—Ö–æ–≤–∏–∫–∏": 3000, "üëü –û–±—É–≤—å": 4200, "üëî –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã": 2800},
    "üì§ –û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞": {"üì¶ –ü–æ –≤–µ—Å—É (550 ‚ÇΩ/–∫–≥)": 0}
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∞)
user_data = {}

##########################################
# FSM –¥–ª—è –ø–æ—Ç–æ–∫–∞ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
##########################################
class PriceCalcStates(StatesGroup):
    waiting_for_shipping = State()
    waiting_for_category = State()
    waiting_for_price = State()

##########################################
# FSM –¥–ª—è –ø–æ—Ç–æ–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
##########################################
class OrderStates(StatesGroup):
    waiting_for_shipping = State()
    waiting_for_category = State()
    waiting_for_photo = State()
    waiting_for_link = State()
    waiting_for_size = State()
    waiting_for_price = State()
    waiting_for_confirmation = State()

##########################################
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äì –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
##########################################
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    user_data[message.from_user.id] = {}
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üõí <b>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</b>.\n"
        "üìä <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b> ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n"
        f"üîπ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è: <b>{YUAN_RATE} ‚ÇΩ</b>"
    )
    await message.answer(welcome_text, reply_markup=get_start_keyboard(), parse_mode="HTML")

##########################################
# –ü–æ—Ç–æ–∫ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
##########################################
@dp.message_handler(Text(equals="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"))
async def start_price_calc(message: types.Message, state: FSMContext):
    user_data[message.from_user.id] = {"flow": "calc"}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_main_keyboard())
    await PriceCalcStates.waiting_for_shipping.set()

@dp.message_handler(state=PriceCalcStates.waiting_for_shipping)
async def price_calc_shipping(message: types.Message, state: FSMContext):
    if message.text == "üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç":
        price_list = (
            "üöò <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (20‚Äì25 –¥–Ω–µ–π):</b>\n"
            " ‚Ä¢ –û–±—É–≤—å ‚Äì 1 100 ‚ÇΩ\n"
            " ‚Ä¢ –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äì 550 ‚ÇΩ\n\n"
            "‚úàÔ∏è <b>–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞ (–æ–∫–æ–ª–æ 10 –¥–Ω–µ–π):</b>\n"
            " ‚Ä¢ –§—É—Ç–±–æ–ª–∫–∏ ‚Äì 2 000 ‚ÇΩ\n"
            " ‚Ä¢ –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äì 2 800 ‚ÇΩ\n"
            " ‚Ä¢ –û–±—É–≤—å ‚Äì 4 200 ‚ÇΩ\n"
            " ‚Ä¢ –ü—É—Ö–æ–≤–∏–∫–∏ ‚Äì 3 000 ‚ÇΩ\n\n"
            "üì§ <b>–û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–æ—Ç 6 –ø–æ–∑–∏—Ü–∏–π):</b>\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Å—É: 550 ‚ÇΩ/–∫–≥ (–ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤ –ú–æ—Å–∫–≤—É).\n\n"
            "üü° <b>–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)</b>\n"
            "3% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
        )
        await message.answer(price_list, parse_mode="HTML")
        return
    if message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await message.answer("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\nüîπ Telegram: @admin\nüîπ Email: support@example.com")
        return
    if message.text not in ["üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞", "üì§ –û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return
    user_data[message.from_user.id]["shipping"] = message.text
    if message.text == "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_standard_categories())
    elif message.text == "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_express_categories())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_wholesale_categories())
    await PriceCalcStates.waiting_for_category.set()

@dp.message_handler(state=PriceCalcStates.waiting_for_category)
async def price_calc_category(message: types.Message, state: FSMContext):
    shipping = user_data[message.from_user.id].get("shipping", "")
    valid_categories = []
    if shipping == "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        valid_categories = ["üëü –û–±—É–≤—å", "üëï –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
    elif shipping == "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞":
        valid_categories = ["üëï –§—É—Ç–±–æ–ª–∫–∏", "üß• –ü—É—Ö–æ–≤–∏–∫–∏", "üëü –û–±—É–≤—å", "üëî –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
    elif shipping == "üì§ –û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        valid_categories = ["üì¶ –ü–æ –≤–µ—Å—É (550 ‚ÇΩ/–∫–≥)"]
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start_command(message, state)
        return
    if message.text not in valid_categories:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
        return
    user_data[message.from_user.id]["category"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):", reply_markup=get_back_keyboard())
    await PriceCalcStates.waiting_for_price.set()

@dp.message_handler(state=PriceCalcStates.waiting_for_price)
async def price_calc_price(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start_command(message, state)
        return
    try:
        price_yuan = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!")
        return
    user_data[message.from_user.id]["price_yuan"] = price_yuan
    shipping = user_data[message.from_user.id].get("shipping", "")
    category = user_data[message.from_user.id].get("category", "")
    base_price = (price_yuan + 30) * YUAN_RATE + 1000
    delivery_price = delivery_costs.get(shipping, {}).get(category, 0)
    if shipping == "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        delivery_price += 150
    final_price = base_price + delivery_price
    await message.answer(f"‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{final_price:.2f} ‚ÇΩ</b>", parse_mode="HTML")
    await start_command(message, state)

##########################################
# –ü–æ—Ç–æ–∫ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
##########################################
@dp.message_handler(Text(equals="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
async def start_order(message: types.Message, state: FSMContext):
    user_data[message.from_user.id] = {"flow": "order"}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_main_keyboard())
    await OrderStates.waiting_for_shipping.set()

@dp.message_handler(state=OrderStates.waiting_for_shipping)
async def order_shipping(message: types.Message, state: FSMContext):
    if message.text == "üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç":
        price_list = (
            "üöò <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (20‚Äì25 –¥–Ω–µ–π):</b>\n"
            " ‚Ä¢ –û–±—É–≤—å ‚Äì 1 100 ‚ÇΩ\n"
            " ‚Ä¢ –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äì 550 ‚ÇΩ\n\n"
            "‚úàÔ∏è <b>–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞ (–æ–∫–æ–ª–æ 10 –¥–Ω–µ–π):</b>\n"
            " ‚Ä¢ –§—É—Ç–±–æ–ª–∫–∏ ‚Äì 2 000 ‚ÇΩ\n"
            " ‚Ä¢ –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äì 2 800 ‚ÇΩ\n"
            " ‚Ä¢ –û–±—É–≤—å ‚Äì 4 200 ‚ÇΩ\n"
            " ‚Ä¢ –ü—É—Ö–æ–≤–∏–∫–∏ ‚Äì 3 000 ‚ÇΩ\n\n"
            "üì§ <b>–û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (–æ—Ç 6 –ø–æ–∑–∏—Ü–∏–π):</b>\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –≤–µ—Å—É: 550 ‚ÇΩ/–∫–≥ (–ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤ –ú–æ—Å–∫–≤—É).\n\n"
            "üü° <b>–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)</b>\n"
            "3% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
        )
        await message.answer(price_list, parse_mode="HTML")
        return
    if message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await message.answer("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\nüîπ Telegram: @admin\nüîπ Email: support@example.com")
        return
    if message.text not in ["üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞", "üì§ –û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return
    user_data[message.from_user.id]["shipping"] = message.text
    if message.text == "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_standard_categories())
    elif message.text == "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_express_categories())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_wholesale_categories())
    await OrderStates.waiting_for_category.set()

@dp.message_handler(state=OrderStates.waiting_for_category)
async def order_category(message: types.Message, state: FSMContext):
    shipping = user_data[message.from_user.id].get("shipping", "")
    valid_categories = []
    if shipping == "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        valid_categories = ["üëü –û–±—É–≤—å", "üëï –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
    elif shipping == "‚úàÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞":
        valid_categories = ["üëï –§—É—Ç–±–æ–ª–∫–∏", "üß• –ü—É—Ö–æ–≤–∏–∫–∏", "üëü –û–±—É–≤—å", "üëî –û–¥–µ–∂–¥–∞ / –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
    elif shipping == "üì§ –û–ø—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        valid_categories = ["üì¶ –ü–æ –≤–µ—Å—É (550 ‚ÇΩ/–∫–≥)"]
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start_command(message, state)
        return
    if message.text not in valid_categories:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
        return
    user_data[message.from_user.id]["category"] = message.text
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await OrderStates.waiting_for_photo.set()

@dp.message_handler(content_types=['photo'], state=OrderStates.waiting_for_photo)
async def order_photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id
    user_data[message.from_user.id]["photo_file_id"] = photo_file_id
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")
    await OrderStates.waiting_for_link.set()

@dp.message_handler(state=OrderStates.waiting_for_link)
async def order_link(message: types.Message, state: FSMContext):
    if not (message.text.startswith("http://") or message.text.startswith("https://")):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)")
        return
    user_data[message.from_user.id]["product_link"] = message.text
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
    await OrderStates.waiting_for_size.set()

@dp.message_handler(state=OrderStates.waiting_for_size)
async def order_size(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["size"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):", reply_markup=get_back_keyboard())
    await OrderStates.waiting_for_price.set()

@dp.message_handler(state=OrderStates.waiting_for_price)
async def order_price(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start_command(message, state)
        return
    try:
        price_yuan = float(message.text)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏!")
        return
    user_data[message.from_user.id]["price_yuan"] = price_yuan

    # –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    shipping = user_data[message.from_user.id].get("shipping", "")
    category = user_data[message.from_user.id].get("category", "")
    base_price = (price_yuan + 30) * YUAN_RATE + 1000
    delivery_price = delivery_costs.get(shipping, {}).get(category, 0)
    if shipping == "üöò –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞":
        delivery_price += 150
    final_price = base_price + delivery_price
    user_data[message.from_user.id]["final_price"] = final_price

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
    summary = (
        f"üìù <b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:</b>\n"
        f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data[message.from_user.id].get('shipping', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {user_data[message.from_user.id].get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Å—ã–ª–∫–∞: {user_data[message.from_user.id].get('product_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–†–∞–∑–º–µ—Ä: {user_data[message.from_user.id].get('size', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ ¬•: {price_yuan}\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_price:.2f} ‚ÇΩ"
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é (—Å–≤–æ–¥–∫–æ–π –∑–∞–∫–∞–∑–∞)
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=user_data[message.from_user.id]["photo_file_id"],
        caption=summary,
        parse_mode="HTML"
    )
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=get_order_confirmation_keyboard())
    await OrderStates.waiting_for_confirmation.set()

@dp.message_handler(state=OrderStates.waiting_for_confirmation)
async def order_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
        order_id = 12345  # –≠–º—É–ª—è—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}")
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return
    await start_command(message, state)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
