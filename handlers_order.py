from aiogram import types, Dispatcher
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from keyboards import get_start_order_keyboard, get_next_step_keyboard, get_delivery_keyboard, get_main_menu_keyboard, get_final_keyboard

from aiogram.dispatcher.filters.state import State, StatesGroup
import re


YUAN_RATE = 12.8  # –ö—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é

class OrderStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_link = State()
    waiting_for_size = State()
    waiting_for_price = State()
    confirming_order = State()

async def handle_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    photo = InputFile("images/NoOrder.jpg")
    await callback.message.answer_photo(
        photo=photo,
        caption=(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–æ–≤–∞—Ä –∑–Ω–∞–∫ ‚âà (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ). "
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–ª—è –≤–∞—Å.\n"
            "–ü–æ—á–µ–º—É?\n"
            "–¢–æ–≤–∞—Ä—ã, –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º ‚âà, –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ –ö–∏—Ç–∞–π –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω. "
            "–ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ö–∏—Ç–∞—è, –∏—Ö –≤—ã–∫—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–ê–õ–ï–ï¬ª."
        ),
        reply_markup=get_start_order_keyboard()
    )

async def handle_further(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    photo = InputFile("images/readme2.jpg")
    await callback.message.answer_photo(
        photo=photo,
        caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –í–∞—à —Ç–æ–≤–∞—Ä –Ω–µ –∏–º–µ–µ—Ç ‚âà –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥ —Ü–µ–Ω–æ–π?\n\n"
                "<b>–¢–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –≤—ã–∫—É–ø–∏—Ç—å –Ω–µ —Å–º–æ–∂–µ–º.</b>",
        parse_mode="HTML",
        reply_markup=get_next_step_keyboard()
    )

async def handle_yesimsure(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    photo = InputFile("images/infocargo.png")
    await callback.message.answer_photo(
        photo=photo,
        caption=(
            "üßÆ <b>–≠—Ç–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</b>\n"
            "–í –Ω–µ–º –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.\n\n"
            "‚ö†Ô∏è<b>–¢–æ–≤–∞—Ä—ã —Å –∑–Ω–∞–∫–æ–º ‚âà –ù–ï –í–´–ö–£–ü–ê–Æ–¢–°–Ø</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∏–∂–µ:"),
        parse_mode="HTML",
        reply_markup=get_delivery_keyboard()
    )

async def handle_delivery(callback: types.CallbackQuery, state: FSMContext):
    delivery_type = callback.data.replace("calc_delivery_", "")
    await state.update_data(delivery_type=delivery_type)
    await callback.message.delete()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ:")
    await OrderStates.waiting_for_photo.set()

async def handle_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
        return
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä")
    await OrderStates.waiting_for_link.set()

async def handle_link(message: types.Message, state: FSMContext):
    if not re.match(r"https?://[^\s]+", message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä")
        return
    await state.update_data(link=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞")
    await OrderStates.waiting_for_size.set()

async def handle_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö")
    await OrderStates.waiting_for_price.set()

async def handle_price(message: types.Message, state: FSMContext):
    try:
        price_yuan = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö")
        return

    user_data = await state.get_data()
    delivery_type = user_data.get("delivery_type")

    # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    delivery_cost = {
        "standard": 550,
        "express": 2800
    }.get(delivery_type, 0)

    final_price = (price_yuan + 30) * YUAN_RATE + delivery_cost + 1000 + (150 if delivery_type == "standard" else 0)

    await state.update_data(price_yuan=price_yuan, final_price=final_price)

    await message.answer(
        f"üì¶ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑</b>\n"
        f"–°—Å—ã–ª–∫–∞: {user_data.get('link')}\n"
        f"–†–∞–∑–º–µ—Ä: {user_data.get('size')}\n"
        f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {'–ê–≤—Ç–æ' if delivery_type == 'standard' else '–ê–≤–∏–∞'}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö: {price_yuan}¬•\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{round(final_price)}‚ÇΩ</b>",
        parse_mode="HTML",
        reply_markup=get_final_keyboard()
    )

    await OrderStates.confirming_order.set()

def register_order_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(handle_order, lambda c: c.data == "order", state="*")
    dp.register_callback_query_handler(handle_further, lambda c: c.data == "further", state="*")
    dp.register_callback_query_handler(handle_yesimsure, lambda c: c.data == "yesimsure", state="*")
    dp.register_callback_query_handler(handle_delivery, lambda c: c.data.startswith("calc_delivery_"), state="*")
    dp.register_message_handler(handle_photo, content_types=types.ContentType.PHOTO, state=OrderStates.waiting_for_photo)
    dp.register_message_handler(handle_link, state=OrderStates.waiting_for_link)
    dp.register_message_handler(handle_size, state=OrderStates.waiting_for_size)
    dp.register_message_handler(handle_price, state=OrderStates.waiting_for_price)
